import { supabase } from '../lib/supabase';

interface CreateMessageParams {
  destinatario_id: string;
  conteudo: string;
  assunto?: string;
  remetente_id?: string;
}

export const createWhatsAppMessage = async (params: CreateMessageParams) => {
  try {
    // Se n√£o foi fornecido remetente_id, usar o admin do sistema
    let remetente_id = params.remetente_id;
    if (!remetente_id) {
      const { data: adminUser } = await supabase
        .from('users')
        .select('id')
        .eq('email', 'admin@lamusicweek.com')
        .single();
      
      remetente_id = adminUser?.id;
    }

    const { data, error } = await supabase
      .from('mensagens')
      .insert({
        remetente_id: remetente_id,
        destinatario_id: params.destinatario_id,
        conteudo: params.conteudo,
        assunto: params.assunto || 'Mensagem WhatsApp',
        status_leitura: 'nao_lida',
        data_envio: new Date().toISOString()
      })
      .select()
      .single();

    if (error) throw error;
    return { success: true, data };
  } catch (error) {
    console.error('Erro ao criar mensagem WhatsApp:', error);
    return { success: false, error };
  }
};

export const createEnrollmentConfirmationMessage = async (
  telefone: string,
  nomeAluno: string,
  nomeOficina: string,
  dataOficina: string,
  horarioOficina: string,
  localOficina: string
) => {
  // Normalizar o telefone removendo o c√≥digo do pa√≠s se presente
  const normalizedPhone = telefone.startsWith('55') ? telefone.slice(2) : telefone;
  
  // Buscar o usu√°rio pelo telefone (tentar ambos os formatos)
  let { data: user, error: userError } = await supabase
    .from('users')
    .select('id')
    .eq('telefone', normalizedPhone)
    .single();

  // Se n√£o encontrou, tentar com o telefone original
  if (userError || !user) {
    const { data: userAlt, error: userErrorAlt } = await supabase
      .from('users')
      .select('id')
      .eq('telefone', telefone)
      .single();
    
    user = userAlt;
    userError = userErrorAlt;
  }

  if (userError || !user) {
    console.error('Usu√°rio n√£o encontrado para o telefone:', telefone, 'ou', normalizedPhone);
    return { success: false, error: 'Usu√°rio n√£o encontrado' };
  }

  const conteudo = `üéµ *Confirma√ß√£o de Inscri√ß√£o - La Music Week* üéµ

Ol√°, ${nomeAluno}!

Sua inscri√ß√£o foi confirmada com sucesso! ‚úÖ

üìã *Detalhes da Oficina:*
üéº Oficina: ${nomeOficina}
üìÖ Data: ${dataOficina}
‚è∞ Hor√°rio: ${horarioOficina}
üìç Local: ${localOficina}

üéØ *Pr√≥ximos Passos:*
‚Ä¢ Chegue 15 minutos antes do hor√°rio
‚Ä¢ Traga seu instrumento (se necess√°rio)
‚Ä¢ Em caso de d√∫vidas, entre em contato conosco

Nos vemos na oficina! üé∂

*Equipe La Music Week*`;

  return createWhatsAppMessage({
    destinatario_id: user.id,
    conteudo,
    assunto: 'Confirma√ß√£o de Inscri√ß√£o'
  });
};

export const createCancellationMessage = async (
  telefone: string,
  nomeAluno: string,
  nomeOficina: string
) => {
  // Normalizar o telefone removendo o c√≥digo do pa√≠s se presente
  const normalizedPhone = telefone.startsWith('55') ? telefone.slice(2) : telefone;
  
  // Buscar o usu√°rio pelo telefone (tentar ambos os formatos)
  let { data: user, error: userError } = await supabase
    .from('users')
    .select('id')
    .eq('telefone', normalizedPhone)
    .single();

  // Se n√£o encontrou, tentar com o telefone original
  if (userError || !user) {
    const { data: userAlt, error: userErrorAlt } = await supabase
      .from('users')
      .select('id')
      .eq('telefone', telefone)
      .single();
    
    user = userAlt;
    userError = userErrorAlt;
  }

  if (userError || !user) {
    console.error('Usu√°rio n√£o encontrado para o telefone:', telefone, 'ou', normalizedPhone);
    return { success: false, error: 'Usu√°rio n√£o encontrado' };
  }

  const conteudo = `üéµ *Cancelamento de Inscri√ß√£o - La Music Week* üéµ

Ol√°, ${nomeAluno}!

Sua inscri√ß√£o na oficina "${nomeOficina}" foi cancelada conforme solicitado.

üí° *Lembre-se:*
‚Ä¢ Voc√™ pode se inscrever em outras oficinas dispon√≠veis
‚Ä¢ Acesse nossa plataforma para ver novas oportunidades
‚Ä¢ Em caso de d√∫vidas, entre em contato conosco

Esperamos v√™-lo em breve em outras atividades! üé∂

*Equipe La Music Week*`;

  return createWhatsAppMessage({
    destinatario_id: user.id,
    conteudo,
    assunto: 'Cancelamento de Inscri√ß√£o'
  });
};

export const createReminderMessage = async (
  telefone: string,
  nomeAluno: string,
  nomeOficina: string,
  dataOficina: string,
  horarioOficina: string,
  localOficina: string
) => {
  // Normalizar o telefone removendo o c√≥digo do pa√≠s se presente
  const normalizedPhone = telefone.startsWith('55') ? telefone.slice(2) : telefone;
  
  // Buscar o usu√°rio pelo telefone (tentar ambos os formatos)
  let { data: user, error: userError } = await supabase
    .from('users')
    .select('id')
    .eq('telefone', normalizedPhone)
    .single();

  // Se n√£o encontrou, tentar com o telefone original
  if (userError || !user) {
    const { data: userAlt, error: userErrorAlt } = await supabase
      .from('users')
      .select('id')
      .eq('telefone', telefone)
      .single();
    
    user = userAlt;
    userError = userErrorAlt;
  }

  if (userError || !user) {
    console.error('Usu√°rio n√£o encontrado para o telefone:', telefone, 'ou', normalizedPhone);
    return { success: false, error: 'Usu√°rio n√£o encontrado' };
  }

  const conteudo = `üéµ *Lembrete - La Music Week* üéµ

Ol√°, ${nomeAluno}!

Este √© um lembrete da sua oficina que acontece amanh√£! üìÖ

üéº *Detalhes:*
üìã Oficina: ${nomeOficina}
üìÖ Data: ${dataOficina}
‚è∞ Hor√°rio: ${horarioOficina}
üìç Local: ${localOficina}

‚ö†Ô∏è *Lembretes Importantes:*
‚Ä¢ Chegue 15 minutos antes
‚Ä¢ Traga seu instrumento (se necess√°rio)
‚Ä¢ Confirme sua presen√ßa respondendo esta mensagem

Nos vemos l√°! üé∂

*Equipe La Music Week*`;

  return createWhatsAppMessage({
    destinatario_id: user.id,
    conteudo,
    assunto: 'Lembrete de Oficina'
  });
};

export const formatPhoneNumber = (phone: string): string => {
  // Remove todos os caracteres n√£o num√©ricos
  const cleaned = phone.replace(/\D/g, '');
  
  // Se n√£o tem c√≥digo do pa√≠s, adiciona 55 (Brasil)
  if (cleaned.length === 11 && cleaned.startsWith('0')) {
    return `55${cleaned.slice(1)}`;
  }
  
  if (cleaned.length === 11) {
    return `55${cleaned}`;
  }
  
  if (cleaned.length === 10) {
    return `55${cleaned}`;
  }
  
  // Se j√° tem c√≥digo do pa√≠s
  if (cleaned.length === 13 && cleaned.startsWith('55')) {
    return cleaned;
  }
  
  return cleaned;
};

export const validatePhoneNumber = (phone: string): boolean => {
  const cleaned = phone.replace(/\D/g, '');
  
  // Verifica se tem pelo menos 10 d√≠gitos (DDD + n√∫mero)
  if (cleaned.length < 10) return false;
  
  // Verifica se tem no m√°ximo 13 d√≠gitos (c√≥digo pa√≠s + DDD + n√∫mero)
  if (cleaned.length > 13) return false;
  
  return true;
};